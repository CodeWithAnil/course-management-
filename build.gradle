plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
    id 'checkstyle'
    id 'pmd'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.modulith:spring-modulith-starter-core:1.1.0'
    // Spring Security (for token validation, role-based access, etc.)
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.apache.poi:poi:5.2.3'
    implementation 'org.apache.poi:poi-ooxml:5.2.3'
    implementation 'com.opencsv:opencsv:5.7.1'

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'

    // JWT Support (JSON Web Tokens)
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    runtimeOnly 'com.h2database:h2'

    //aws
    implementation 'software.amazon.awssdk:secretsmanager:2.25.20'
    implementation 'software.amazon.awssdk:regions:2.25.20'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.0'
    implementation 'software.amazon.awssdk:s3:2.25.20'
    implementation platform("software.amazon.awssdk:bom:2.25.60")
    implementation "software.amazon.awssdk:sts"

    implementation 'software.amazon.awssdk:secretsmanager:2.25.20'
    implementation 'software.amazon.awssdk:regions:2.25.20'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.0'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-test:3.4.4'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.3'
    testImplementation 'org.mockito:mockito-core:5.2.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.2.0'
    testImplementation 'org.hibernate.validator:hibernate-validator:8.0.1.Final'
    testImplementation 'jakarta.validation:jakarta.validation-api:3.0.2'
    testImplementation 'com.h2database:h2'
    testImplementation 'org.springframework.boot:spring-boot-test'
    developmentOnly("org.springframework.boot:spring-boot-devtools")

}

tasks.named('test') {
    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.10"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

checkstyle {
    toolVersion = '10.3' // or whatever version you prefer
    configFile = file("config/checkstyle/checkstyle.xml")
    configDirectory.set(file("config/checkstyle"))
    ignoreFailures = false // Set to true if you don't want build to fail on violations
    showViolations = true
}

pmd {
    toolVersion = "6.55.0" // or latest version
    ignoreFailures = false
    consoleOutput = true
    ruleSets = [] // disables built-in rulesets
    ruleSetFiles = files("config/pmd/ruleset.xml") // custom rules
}


tasks.named("pmdTest").configure {
    enabled = false
}

tasks.named("checkstyleTest").configure {
    enabled = false
}

